/***********************************************************************************************//**
 * \file   app.c
 * \brief  Event handling and application code for Empty NCP Host application example
 ***************************************************************************************************
 * <b> (C) Copyright 2016 Silicon Labs, http://www.silabs.com</b>
 ***************************************************************************************************
 * This file is licensed under the Silabs License Agreement. See the file
 * "Silabs_License_Agreement.txt" for details. Before using this software for
 * any purpose, you must agree to the terms of that agreement.
 **************************************************************************************************/

/* standard library headers */
#include <stdint.h>
#include <string.h>
#include <stdio.h>
#include <stdbool.h>
#include <unistd.h>

/* BG stack headers */
#include "bg_types.h"
#include "gecko_bglib.h"

/* Own header */
#include "app.h"

// App booted flag
static bool appBooted = false;

/***********************************************************************************************//**
 *  \brief  Event handler function.
 *  \param[in] evt Event pointer.
 **************************************************************************************************/
void appHandleEvents(struct gecko_cmd_packet *evt)
{
  if (NULL == evt) {
    return;
  }

  // Do not handle any events until system is booted up properly.
  if ((BGLIB_MSG_ID(evt->header) != gecko_evt_system_boot_id)
      && !appBooted) {
#if defined(DEBUG)
    printf("Event: 0x%04x\n", BGLIB_MSG_ID(evt->header));
#endif
    usleep(50000);
    return;
  }

  /* Handle events */
  switch (BGLIB_MSG_ID(evt->header)) {
    case gecko_evt_system_boot_id:

      appBooted = true;
      printf("System booted. Starting advertising... \n");

            printf("System booted. Starting BLE device scan. \r\n");

            /* Start a generic BLE scan to search for devices */
            gecko_cmd_le_gap_discover(1);

      break;
      

		        /* Check for scan response results */
        case gecko_evt_le_gap_scan_response_id:
				//,



            rssi = evt->data.evt_le_gap_scan_response.rssi;
           // address = evt->data.evt_le_gap_scan_response.address.addr;


				printf("BLE device found\r\n");
				printf (" rssi:%d  \r\n", evt->data.evt_le_gap_scan_response.rssi );
				printf (" packet_type: %d  \r\n" ,  evt->data.evt_le_gap_scan_response.packet_type);
				printf (" address: %x6s \r\n" ,  evt->data.evt_le_gap_scan_response.address.addr);
				printf (" address_type: %d  \r\n" ,  evt->data.evt_le_gap_scan_response.address_type);
				printf (" bonding: %d  \r\n" ,  evt->data.evt_le_gap_scan_response.bonding);
				printf (" data:%xs \r\n" ,  evt->data.evt_le_gap_scan_response.data.data);
      
      
      

    case gecko_evt_le_connection_closed_id:

      /* Restart general advertising and re-enable connections after disconnection. */
      gecko_cmd_le_gap_set_mode(le_gap_general_discoverable, le_gap_undirected_connectable);

      break;

    default:
      break;
  }
}
